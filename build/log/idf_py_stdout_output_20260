[1/11] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D F:\Bijesh\ESP_Workspace\ESP32_FC\build\bootloader\esp-idf\esptool_py && F:\softwares\Espressif-new\python_env\idf5.2_py3.10_env\Scripts\python.exe F:/softwares/Espressif/esp-idf-v5.2.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 F:/Bijesh/ESP_Workspace/ESP32_FC/build/bootloader/bootloader.bin"
Bootloader binary size 0x6150 bytes. 0xeb0 bytes (13%) free.
[2/9] Building C object esp-idf/fcManager/CMakeFiles/__idf_fcManager.dir/altitudeManager/altitudeManager.c.obj
[3/9] Building C object esp-idf/fcManager/CMakeFiles/__idf_fcManager.dir/fcManager.c.obj
[4/9] Linking C static library esp-idf\fcManager\libfcManager.a
[5/9] Generating ld/sections.ld
[6/9] Linking CXX executable ESP32_FC.elf
[7/9] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated F:/Bijesh/ESP_Workspace/ESP32_FC/build/ESP32_FC.bin
[8/9] cmd.exe /C "cd /D F:\Bijesh\ESP_Workspace\ESP32_FC\build\esp-idf\esptool_py && F:\softwares\Espressif-new\python_env\idf5.2_py3.10_env\Scripts\python.exe F:/softwares/Espressif/esp-idf-v5.2.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app F:/Bijesh/ESP_Workspace/ESP32_FC/build/partition_table/partition-table.bin F:/Bijesh/ESP_Workspace/ESP32_FC/build/ESP32_FC.bin"
ESP32_FC.bin binary size 0x3ff80 bytes. Smallest app partition is 0x100000 bytes. 0xc0080 bytes (75%) free.
[8/9] cmd.exe /C "cd /D F:\softwares\Espressif\esp-idf-v5.2.1\components\esptool_py && F:\softwares\Espressif-new\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=F:/softwares/Espressif/esp-idf-v5.2.1 -D SERIAL_TOOL=F:/softwares/Espressif-new/python_env/idf5.2_py3.10_env/Scripts/python.exe;;F:/softwares/Espressif/esp-idf-v5.2.1/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=F:/Bijesh/ESP_Workspace/ESP32_FCesptool.py --chip esp32 -p COM7 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 4MB 0x1000 bootloader/bootloader.bin 0x10000 ESP32_FC.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port COM7
Connecting..............
Chip is ESP32-D0WDQ6 (revision v1.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: 7c:9e:bd:ed:a3:e8
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0004ffff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 24912 bytes to 15372...
Writing at 0x00001000... (100 %)
Wrote 24912 bytes (15372 compressed) at 0x00001000 in 0.8 seconds (effective 237.4 kbit/s)...
Hash of data verified.
Compressed 262016 bytes to 145043...
Writing at 0x00010000... (11 %)
Writing at 0x0001e97b... (22 %)
Writing at 0x00023bf4... (33 %)
Writing at 0x000293de... (44 %)
Writing at 0x0002ec5a... (55 %)
Writing at 0x0003417b... (66 %)
Writing at 0x0003b80d... (77 %)
Writing at 0x00045384... (88 %)
Writing at 0x0004ac31... (100 %)
Wrote 262016 bytes (145043 compressed) at 0x00010000 in 3.5 seconds (effective 603.8 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 330.4 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
/build -P F:/softwares/Espressif/esp-idf-v5.2.1/components/esptool_py/run_serial_tool.cmake"
